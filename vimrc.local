" vim: set foldmarker={{{,}}} foldlevel=0 foldmethod=marker:

"
" local settings Copyright (c) 2015 Stefan Martin
"

" USEFULL SHORTCUTS {{{
let mapleader = ","
nnoremap ß <C-]>
nnoremap <silent> <leader>gf <C-]>

"nnoremap ö ]c
"nnoremap ä [c

if &term =~ '^screen'
    " tmux will send xterm-style keys when xterm-keys is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

if isdirectory(expand("~/.vim/bundle/vim-signify/"))
    nmap <leader>gj <plug>(signify-next-hunk)
    nmap <leader>gk <plug>(signify-prev-hunk)
endif

"
" this requires iterm2 to use xterm key profiles
"
nnoremap <silent> <C-Up>   :move-2<CR>==
nnoremap <silent> <C-Down> :move+<CR>==
xnoremap <silent> <C-Up>   :move-2<CR>gv=gv
xnoremap <silent> <C-Down> :move'>+<CR>gv=gv

"Duplicate lines above and below
nnoremap <C-S-Down> Yp
inoremap <C-S-Down> <esc>Yp
xnoremap <C-S-Down> y`>pgv
nnoremap <C-S-Up> YP
inoremap <C-S-Up> <esc>YP
xnoremap <C-S-Up> y`<Pgv

"
" command line mapping like in shell
"
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-K> <C-U>
cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

let g:train_musle_memory = 0

if g:train_musle_memory == 1
    nnoremap <left> :bprev<CR>
    nnoremap <right> :bnext<CR>
    nnoremap <up> :tabnext<CR>
    nnoremap <down> :tabprev <CR>
endif


" Find merge conflict markers
map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

" Shortcuts
" Change Working Directory to that of the current file
cmap cwd lcd %:p:h
cmap cd. lcd %:p:h

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Allow using the repeat operator with a visual selection (!)
" http://stackoverflow.com/a/8064607/127816
vnoremap . :normal .<CR>

" For when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

" Some helpers to edit mode
" http://vimcasts.org/e/14
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

inoremap <C-e> <C-o>$
inoremap <C-a> <C-o>^
nnoremap ä p=`]
"nnoremap <leader>k cs()
nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround("(", ")")<CR>

" }}}

" CSCOPE {{{

if has ("cscope")
    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cscopetag

    " 1 = check ctags for definition of a symbol before checking cscope
    " 0 = reverse
    set csto=1

    " add any cscope database in current directory
    " note: this is better than the autoload_cscope plugin because it allows 'vim -t {tag}' from the command line
    if filereadable("cscope.out")
        cs add cscope.out
        " else search up a few directories
    elseif filereadable("../cscope.out")
        cs add ../cscope.out
    elseif filereadable("../../cscope.out")
        cs add ../../cscope.out
    elseif filereadable("../../../cscope.out")
        cs add ../../../cscope.out
    elseif filereadable("../../../../cscope.out")
        cs add ../../../../cscope.out
    elseif filereadable("../../../../../cscope.out")
        cs add ../../../../../cscope.out
    elseif filereadable("../../../../../../cscope.out")
        cs add ../../../../../../cscope.out
    elseif filereadable("../../../../../../../cscope.out")
        cs add ../../../../../../../cscope.out
    elseif filereadable("../../../../../../../../cscope.out")
        cs add ../../../../../../../../cscope.out
    elseif filereadable("../../../../../../../../../cscope.out")
        cs add ../../../../../../../../../cscope.out
    elseif filereadable("../../../../../../../../../../cscope.out")
        cs add ../../../../../../../../../../cscope.out
        " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif

    " The following maps all invoke one of the following cscope search types:
    " (note: <C-@> = <C-Space> = Ctrl+Space
    "
    "   's'   symbol: find all references to the token under cursor
    "   'g'   global: find global definition(s) of the token under cursor
    "   'c'   calls:  find all calls to the function name under cursor
    "   't'   text:   find all instances of the text under cursor
    "   'e'   egrep:  egrep search for the word under cursor
    "   'f'   file:   open the filename under cursor
    "   'i'   includes: find files that include the filename under cursor
    "   'd'   called: find functions that function under cursor calls
    nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>

    " Ctrl+space+space will open cscope results in vertically split window
    nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>
endif
" }}}

" COLORSCHEME:solarized {{{

if filereadable(expand("~/.vim/bundle/vim-colors-solarized/colors/solarized.vi"))
    let g:solarized_termcolors=256
    let g:solarized_termtrans=1
    let g:solarized_contrast="normal"
    let g:solarized_visibility="normal"
    "set background=light
    color solarized
endif
" }}}

" COLORSCHEME {{{
if has('gui_running')
    colorscheme atom-dark
else
    colorscheme smyck
endif
" }}}

" COLORSETTING OVERRIDE {{{
set t_Co=256

hi ColorColumn ctermbg=LightBlue
hi Folded ctermbg=237 ctermfg=7

"hi CursorLineNr term=bold ctermfg=Yellow gui=bold guifg=Yellow
" execute set colorcolumn= . join(range(120,335), ',')
" call matchadd('ColorColumn', '\%81v', 100)
" }}}

" CTRLP PLUGIN {{{
if isdirectory(expand("~/.vim/bundle/ctrlp.vim/"))
    let g:ctrlp_clear_cache_on_exit = 0
    let g:ctrlp_show_hidden         = 1
    let g:ctrlp_follow_sym_links    = 1
    let g:ctrlp_reuse_window        = 'startify'
    let g:ctrlp_map                 = '<C-P>'
    let g:ctrlp_cmd                 = 'CtrlP'
    let g:ctrlp_use_caching         = 1
    let g:ctrlp_cache_dir           = $HOME . '/.cache/ctrlp'
    let g:ctrlp_by_mru              = 1
    let g:ctrlp_working_path_mode   = 0
    let g:ctrlp_max_height          = 25
    let g:ctrlp_max_files           = 0
    let g:ctrlp_max_depth           = 40
    let g:ctrlp_extension           = ['buffertag']
    let g:ctrlp_match_window        = 'top,order:ttb,min:1,max:30,results:15'

    if (has("gui_macvim"))
        nnoremap <silent> <D-p> :CtrlP<CR>
        nnoremap <silent> <D-r> :CtrlPFunky<CR>
        nnoremap <silent> <D-e> :CtrlPMRU<CR>
        nmap <silent> <D-t> :CtrlPBuffer<CR>
    endif

    nnoremap <silent> <leader>ct :CtrlPBufTag<CR>
    nnoremap <silent> <leader>cT :CtrlPTag<CR>
    nnoremap <silent> <leader>cl :CtrlPLine<CR>
    nnoremap <silent> <leader>b :CtrlPBuffer<CR>
    nnoremap <silent> <leader>l :CtrlPMRU<CR>

    let g:ctrlp_custom_ignore = {
                \ 'dir':  '\.git$\|\.hg$\|\.svn$|vendor|node_modules',
                \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

    " On Windows use "dir" as fallback command.
    if WINDOWS()
        let s:ctrlp_fallback = 'dir %s /-n /b /s /a-d'
    elseif executable('ag')
        let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
    elseif executable('ack-grep')
        let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
    elseif executable('ack')
        let s:ctrlp_fallback = 'ack %s --nocolor -f'
    else
        let s:ctrlp_fallback = 'find %s -type f'
    endif

    if isdirectory(expand("~/.vim/bundle/ctrlp-funky/"))
        " CtrlP extensions
        let g:ctrlp_funky_syntax_highlight = 1
        let g:ctrlp_extensions = ['funky']

        nmap <leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<CR>
        nmap <leader>fu :CtrlPFunky<CR>
        if has('gui_running')
            nmap <silent> <D-R> :CtrlPFunky<CR>
        endif
    endif
endif

" }}}

" AG PLUGIN {{{
" https://github.com/rking/ag.vim.git bundle/ag
let g:ag_prg="ag --vimgrep --smart-case"
nnoremap <leader>a :Ag!<SPACE>
if executable("ag")
    set grepprg=ag\ --nogroup\ --nocolor\ --ignore-case\ --column
    set grepformat=%f:%l:%c:%m,%f:%l:%m
    nnoremap <leader>s :silent! grep! "\b<C-r><C-w>\b"<CR>:cwindow<CR>:redraw!<CR>
    command! -nargs=+ -complete=file_in_path -bar Ag silent grep! <args>|cwindow|redraw!
endif
" }}}

" SYNTASTIC PLUGIN {{{
" git clone https://github.com/scrooloose/syntastic.git

let g:syntastic_mode_map = {'mode':'passive', 'active_file_types':[], 'passive_file_types':[]}
let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

let g:syntastic_php_phpcs_args           = "--standard = Zend"
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_aggregate_errors         = 1
"let g:syntastic_auto_loc_list            = 0
let g:syntastic_check_on_open            = 1
let g:syntastic_check_on_wq              = 0
let g:syntastic_auto_jump                = 1
let g:syntastic_error_symbol             = "✗"
let g:syntastic_style_error_symbol       = "✠"
let g:syntastic_warning_symbol           = "⚠"
let g:syntastic_style_warning_symbol     = "≈"

nnoremap <leader>E :SyntasticCheck<CR> :SytasticToggleMode<CR>
" }}}

" VIM-PHPFMT PLUGIN {{{
" git clone https://github.com/dericofilho/vim-phpfmt.git

let g:phpfmt_on_save = 0
let g:phpfmt_psr2=1
" disable it until it works correctly
let g:phpfmt_enable_default_mapping = 0
" }}}

" VIM-PHP-CS-FIXER PLUGIN {{{
"
if !executable('~/php-cs-fixer')
    let g:php_cs_fixer_path = "~/.composer/vendor/bin/php-cs-fixer"
end

let g:php_cs_fixer_verbose = 1
" }}}

" VC PLUGIN {{{
"
let g:vc_allow_leader_mappings = 0
let g:vc_browse_cache_all = 1
map <silent> <leader>bl  : VCBlame<CR>
map <silent> <leader>ci  : VCCommit<CR>
map <silent> <leader>df  : VCDiff<CR>
map <silent> <leader>dfi : VCDiff!<CR>
map <silent> <leader>st  : VCStatus<CR>
map <silent> <leader>su  : VCStatus u<CR>
map <silent> <leader>sq  : VCStatus u q<CR>
map <silent> <leader>sc  : VCStatus .<CR>
map <silent> <leader>lg  : VCLog<CR>
"map <silent> <leader>b  : VCBrowse<CR>
"map <silent> <leader>bl : VCBrowseMyList<CR>
"map <silent> <leader>br : VCBrowseRepo<CR>
"map <silent> <leader>bw : VCBrowseWorkingCopy<CR>
"map <silent> <leader>bb : VCBrowseBookMarks<CR>
"map <silent> <leader>bf : VCBrowseBuffer<CR>
"map <silent> <leader>bm : VCBrowse<CR>
map <silent> <leader>q   : diffoff! <CR>: q<CR>
" }}}

" ULTISNIPS PLUGIN {{{

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" }}}

" DELIMITMATE PLUGIN {{{
"
let g:delimitMate_expand_cr = 2
let g:delimitMate_autoclose = 1
augroup delimite_mate
    autocmd!
    autocmd FileType php let b:delimitMate_eol_marker=';'
augroup END
" }}}

" MATCHIT PLUGIN {{{
runtime! macros/matchit.vim
" }}}

" MULTIPLE CURSORS {{{
" Called once right before you start selecting multiple cursors
function! Multiple_cursors_before()
  if exists(':NeoCompleteLock')==2
    exe 'NeoCompleteLock'
  endif
endfunction

" Called once only when the multiple selection is canceled (default <Esc>)
function! Multiple_cursors_after()
  if exists(':NeoCompleteUnlock')==2
    exe 'NeoCompleteUnlock'
  endif
endfunction
" }}}

" TABULARIZE {{{
if isdirectory(expand("~/.vim/bundle/tabular"))
    nmap <Leader>a& :Tabularize /&<CR>
    vmap <Leader>a& :Tabularize /&<CR>
    nmap <Leader>a= :Tabularize /=<CR>
    vmap <Leader>a= :Tabularize /=<CR>
    nmap <Leader>a=> :Tabularize /=><CR>
    vmap <Leader>a=> :Tabularize /=><CR>
    nmap <Leader>a: :Tabularize /:<CR>
    vmap <Leader>a: :Tabularize /:<CR>
    nmap <Leader>a:: :Tabularize /:\zs<CR>
    vmap <Leader>a:: :Tabularize /:\zs<CR>
    nmap <Leader>a, :Tabularize /,<CR>
    vmap <Leader>a, :Tabularize /,<CR>
    nmap <Leader>a,, :Tabularize /,\zs<CR>
    vmap <Leader>a,, :Tabularize /,\zs<CR>
    nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
    vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
endif
" }}}

" TAGBAR {{{
if isdirectory(expand("~/.vim/bundle/tagbar/"))
    nnoremap <silent> <leader>tt :TagbarToggle<CR>

    " If using go please install the gotags program using the following
    " go install github.com/jstemmer/gotags
    " And make sure gotags is in your path
    let g:tagbar_type_go = {
                \ 'ctagstype' : 'go',
                \ 'kinds'     : [  'p:package', 'i:imports:1', 'c:constants', 'v:variables',
                \ 't:types',  'n:interfaces', 'w:fields', 'e:embedded', 'm:methods',
                \ 'r:constructor', 'f:functions' ],
                \ 'sro' : '.',
                \ 'kind2scope' : { 't' : 'ctype', 'n' : 'ntype' },
                \ 'scope2kind' : { 'ctype' : 't', 'ntype' : 'n' },
                \ 'ctagsbin'  : 'gotags',
                \ 'ctagsargs' : '-sort -silent'
                \ }
endif
"}}}

" NEOCOMPLETE {{{
if isdirectory(expand("~/.vim/bundle/neocomplete.vim/"))
    let g:neocomplete#enable_at_startup            = 1
    " let g:acp_enableAtStartup                      = 0
    " let g:neocomplete#enable_smart_case            = 1
    " let g:neocomplete#enable_auto_delimiter        = 1
    " let g:neocomplete#max_list                     = 15
    " let g:neocomplete#force_overwrite_completefunc = 1

    " Define dictionary.
    " let g:neocomplete#sources#dictionary#dictionaries = {
    "             \ 'default' : '',
    "             \ 'vimshell' : $HOME.'/.vimshell_hist',
    "             \ 'scheme' : $HOME.'/.gosh_completions'
    "             \ }

    " Disable automatic completion for each and every typing.
    " We can use ^X^U to trigger this completion.
    " let g:neocomplete#disable_auto_complete = 0

    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif

    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif

    if !exists('g:neocomplete#force_omni_input_patterns')
        let g:neocomplete#force_omni_input_patterns = {}
    endif
    let g:neocomplete#force_omni_input_patterns.typescript = '[^. *\t]\.\w*\|\\w*::'

    let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    " let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
    " let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    " let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
    " let g:neocomplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'

endif
" }}}

" VIM-AIRLINE PLUGIN {{{
" Set configuration options for the statusline plugin vim-airline.
" Use the powerline theme and optionally enable powerline symbols.
" To use the symbols , , , , , , and .in the statusline
" See `:echo g:airline_theme_map` for some more choices
" Default in terminal vim is 'dark'
"
" git clone https://github.com/bling/vim-airline ~/.vim/bundle/vim-airline
"
if isdirectory(expand("~/.vim/bundle/vim-airline/"))
    let g:airline_powerline_fonts                    = 1
    let g:airline#extensions#tabline#enabled         = 1
    let g:airline#extensions#tabline#formatter       = 'unique_tail'
    let g:airline#extensions#tabline#left_sep        = ' '
    let g:airline#extensions#tabline#left_alt_sep    = '¦'
    "let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#tabline#buffer_nr_show  = 1

    if has('gui_running')
        let g:airline_theme = 'behelit'
    else
        let g:airline_theme = 'badwolf'
    endif
    "let g:airline_left_sep                    = ''
    "let g:airline_right_sep                   = ''
    "let g:airline_section_z                   = ''

    if !exists('g:airline_powerline_fonts')
        " Use the default set of separators with a few customizations
        let g:airline_left_sep='›'  " Slightly fancier than '>'
        let g:airline_right_sep='‹' " Slightly fancier than '<'
    endif
endif
" }}}

" INDENTLINE PLUGIN {{{
"let g:indentLine_color_gui = '#A4E57E'
let g:indentLine_char = '︙'
let g:indentLine_char = '│'
let g:indentLine_char = '┆'
" }}}

" ARGWRAP PLUGIN {{{
nnoremap <leader>aw :ArgWrap<CR>
" }}}

" SURROUND PLUGIN {{{
if isdirectory(expand("~/.vim/bundle/vim-surround/"))
    function! SurroundIt()
        silent! normal 0f(f cs()
    endfunction

    command! Surround :call SurroundIt()
    nnoremap <leader>s : Surround<CR>
endif
" }}}

" TYPESCRIPT PLUGIN {{{
let g:tsuquyomi_disable_quickfix = 1
let g:tsuquyomi_tsserver_path="$HOME/.npm-packages/bin/tsserver"
" }}}

" VIM-RSI {{{
let g:rsi_no_meta = 1
" }}}

" GREPLACE {{{
set grepprg=ag
let g:grep_cmd_opts = '--line-numbers --noheading'
" }}}
