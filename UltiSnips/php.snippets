global !p
import string
import os
def path_to_namespace(snip, path):
	fullpath = os.path.abspath(path)

	parts = fullpath.split(os.sep)

	index = parts.index('pfh')

	namespace = []

	try:
		while True:
			part = parts.pop(index)

			if 'src' == part or 'tests' == part:
				break

			namespace.append(part.title())
	except IndexError:
		pass

	return '\\'.join(namespace)
endglobal

snippet nm "sets namespace for php specific projects" b
`!p snip.rv = 'namespace ' + path_to_namespace(snip, path) + ';'`
endsnippet

snippet met "insert a public method" b
public function ${1:name}(${2:params})
{
	$0
}
endsnippet

snippet pmet "insert a protected method" b
protected function ${1:name}(${2:params})
{
	$0
}
endsnippet

snippet test "it inserts a php unit test method" b
/** @test */
public function it_${1:name}()
{
	$0
}
endsnippet

snippet smet "it inserts a static public method" b
public static function ${1:name}(${2:params})
{
	$0
}
endsnippet

snippet $ "expands to this keyword"
$this->$0
endsnippet

snippet t "expands to this keyword"
$this->$0
endsnippet

snippet psy "inserts psy shell debug statement" !b
eval(\Psy\sh());
endsnippet

snippet dd "inserts a die(var_dump(|))" b
die(var_dump(${1:$variable}));$0
endsnippet

snippet cl "insert a ChrompPhp Log Statement" b
\ChromePhp::${1:log}(${2:\$variable});$0
endsnippet

snippet cld "insert a ChromePHP Log statement with var_export" b
\ChromePhp::${1:log}(utf8_encode(var_export(${2:\$variable}, true)));$0
endsnippet

snippet re "inserts a return statement" b
return ${1:#what?};$0
endsnippet

snippet die "inserts a die statement with dumping the method where it takes place" b
die(__METHOD__);
endsnippet

snippet th "inserts a throw statement" b
throw new \\${1:Exception}('${2:something weird happened}');$0
endsnippet

snippet thr "inserts a throw statement" b
throw new \\${1:InvalidArgumentException}(sprintf('%s(): $2 (%s))', __METHOD__, '${3:arg}'));$0
endsnippet

snippet @p "inserts a docblock tag for @param"
@param ${1:string} $${2:name} The $2 ${3:comment}. 
endsnippet

snippet @r "inserts a docblock tag for @return"
@return ${1:void}
endsnippet

snippet @t "inserts a docblock tag for @throws"
@throws ${1:Exception} ${2:write a wonderful comment}
endsnippet

snippet cs "insert a coding standard ignore line"
// phpcs:ignore
endsnippet

snippet csi "insert a conding standard start/end block"
// @codingStandardsIgnoreStart
${1:${VISUAL}}
// @codingStandardsIgnoreEnd
$0
endsnippet
